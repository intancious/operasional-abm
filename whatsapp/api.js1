const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const axios = require("axios");
const qrcode = require("qrcode");

const config = require("./config.json");
const { Client, LocalAuth } = require("whatsapp-web.js");
const wwebVersion = '2.2409.1';

process.title = "whatsapp-node-api";
global.client = new Client({
    authStrategy: new LocalAuth(),
    restartOnAuthFail: true,
    puppeteer: {
        headless: true
    },
    webVersionCache: {
       type: 'remote',
       remotePath: `https://raw.githubusercontent.com/wppconnect-team/wa-version/main/html/${wwebVersion}.html`,
    },
});

global.authed = false;

const app = express();

const port = process.env.PORT || config.port;
// Set Request Size Limit 50 MB
app.use(bodyParser.json({ limit: "512mb" }));

app.use(express.json());
app.use(bodyParser.urlencoded({ extended: true }));

client.on("qr", (qr) => {
    qrcode.toDataURL(qr, (err, url) => {
        console.log(qr);
        fs.writeFileSync('./components/last.qr', url);
    });
});

client.on("authenticated", () => {
    console.log("AUTH!");
    authed = true;
    try {
        fs.unlinkSync("./components/last.qr");
    } catch (err) { }
});

client.on("auth_failure", () => {
    console.log("AUTH Failed !");
    process.exit();
});

client.on("ready", () => {
    console.log("Client is ready!");
});

client.on("message", async (msg) => {
    if (config.webhook.enabled) {
        if (msg.hasMedia) {
            const attachmentData = await msg.downloadMedia();
            msg.attachmentData = attachmentData;
        }
        axios.post(config.webhook.path, { msg });
    }
});
client.on("disconnected", () => {
    console.log("disconnected");
});
client.initialize();

const chatRoute = require("./components/chatting");
const groupRoute = require("./components/group");
const authRoute = require("./components/auth");
const contactRoute = require("./components/contact");

app.use(function (req, res, next) {
    console.log(req.method + " : " + req.path);
    next();
});
app.use("/chat", chatRoute);
app.use("/group", groupRoute);
app.use("/auth", authRoute);
app.use("/contact", contactRoute);

app.listen(port, () => {
    console.log("Server Running Live on Port : " + port);
});
